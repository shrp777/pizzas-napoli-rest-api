{
  "name": "Pizzas Napoli REST API",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "Welcome",
      "seq": 1,
      "request": {
        "url": "http://localhost:3000",
        "method": "GET",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [
          {
            "name": "res.body.message",
            "value": "eq Pizzas Napoli REST API",
            "enabled": true,
            "uid": "JaeUMuWkTpqrdJ0XTt5Hw"
          },
          {
            "name": "res.body",
            "value": "isJson",
            "enabled": true,
            "uid": "jDHb0LP7xwogFH6GaJuPc"
          },
          {
            "name": "res.status",
            "value": "eq 200",
            "enabled": true,
            "uid": "3iv0BNAhJPuE4YSCIXWTC"
          }
        ],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "folder",
      "name": "pizzas",
      "items": [
        {
          "type": "http",
          "name": "Create Pizza",
          "seq": 1,
          "request": {
            "url": "http://localhost:3000/pizzas",
            "method": "POST",
            "headers": [],
            "params": [],
            "body": {
              "mode": "json",
              "json": "{\n  \"name\": \"Quattro Stagioni\",\n  \"base\": \"Tomate\",\n  \"ingredients\": [\n    \"jambon\",\n    \"mozzarella\",\n    \"champignons\",\n    \"coeurs d'artichaut\",\n    \"olives\"\n  ],\n  \"price\": 12\n}",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "req.body",
                "value": "isNotEmpty",
                "enabled": true,
                "uid": "x5cXxkH1CdN7i1TeDPHc0"
              },
              {
                "name": "req.body.id",
                "value": "isUndefined",
                "enabled": true,
                "uid": "dYiNZ0McESkxxJ3vno2Fm"
              },
              {
                "name": "req.body.name",
                "value": "isString",
                "enabled": true,
                "uid": "1wMl1nRBsNdGITlA5sJmJ"
              },
              {
                "name": "req.body.base",
                "value": "isString",
                "enabled": true,
                "uid": "Inqjj2CX8DbZvbfTGuKlX"
              },
              {
                "name": "req.body.ingredients",
                "value": "isArray",
                "enabled": true,
                "uid": "r7nS5Q5eLrDIieMsp9zUX"
              },
              {
                "name": "req.body.price",
                "value": "isNumber",
                "enabled": true,
                "uid": "s4eoVvlfxD4xg0fZW7QW8"
              },
              {
                "name": "res.status",
                "value": "eq 201",
                "enabled": true,
                "uid": "NCyZsfHda425tVdOPeDRR"
              },
              {
                "name": "res.body.pizza.id",
                "value": "isNumber",
                "enabled": true,
                "uid": "wn6IDgmDaIXjJBgTWBHF8"
              }
            ],
            "tests": "test(\"id inside HTTP Response body should be equal to id inside HTTP Response header location\", ()=> expect(res.body.pizza.id).to.equal(Number(res.getHeader(\"location\").split(\"/\").reverse()[0])))\ntest(\"pizza.name inside response body should be equal to pizza name inside response\", ()=>expect(res.body.pizza.name).to.equal(req.body.name))\n\ntest(\"pizza.price inside response body should be equal to pizza price inside response\", ()=>expect(res.body.pizza.price).to.equal(req.body.price))\n\ntest(\"pizza.base inside response body should be equal to pizza base inside response\", ()=>expect(res.body.pizza.base).to.equal(req.body.base))\n\ntest(\"pizza.ingredients length inside response body should be equal to pizza ingredients length inside response\", ()=>expect(res.body.pizza.ingredients.length).to.equal(req.body.ingredients.length))\n\ntest(\"pizza.ingredients inside response body should be equal to pizza ingredients inside response\", ()=>expect(JSON.stringify(res.body.pizza.ingredients)).to.equal(JSON.stringify(req.body.ingredients)))",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Delete 1 Pizza by id",
          "seq": 8,
          "request": {
            "url": "http://localhost:3000/pizzas/1",
            "method": "DELETE",
            "headers": [],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.status",
                "value": "eq 204",
                "enabled": false,
                "uid": "30SRNRbWXuw0ffINNDTA3"
              },
              {
                "name": "res.body",
                "value": "isEmpty",
                "enabled": false,
                "uid": "JvgF72nOe3HEzHPifuF78"
              }
            ],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Filter Pizzas Collection by base",
          "seq": 4,
          "request": {
            "url": "http://localhost:3000/pizzas?base=Tomate",
            "method": "GET",
            "headers": [],
            "params": [
              {
                "name": "base",
                "value": "Tomate",
                "type": "query",
                "enabled": true
              },
              {
                "name": "base",
                "value": "Crème",
                "type": "query",
                "enabled": false
              },
              {
                "name": "base",
                "value": "Nature",
                "type": "query",
                "enabled": false
              }
            ],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.body",
                "value": "isJson",
                "enabled": true,
                "uid": "Sex1P2Jkr0WwrvCEyOxd4"
              },
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "4Unh9A8LfSqvzq6GZwMZZ"
              },
              {
                "name": "res.body.pizzas",
                "value": "isArray",
                "enabled": true,
                "uid": "HcoQAS6SkeDi00CRvWfVS"
              }
            ],
            "tests": "function getQueryParams(url) {\n  const paramArr = url.slice(url.indexOf('?') + 1).split('&');\n  const params = {};\n  paramArr.map(param => {\n      const [key, val] = param.split('=');\n      params[key] = decodeURIComponent(val);\n  })\n  return params;\n}\n\ntest(\"HTTP Request query string base should be Tomate, Crème or Nature\", ()=>expect([\"Tomate\",\"Crème\",\"Nature\"]).to.contain(getQueryParams(req.getUrl()).base))\n\ntest(\"HTTP Request query string length should be equal to 1\", ()=>expect(Object.keys(getQueryParams(req.getUrl())).length\n).to.equal(1))\n\ntest(\"HTTP Request query string base should be equal to each pizza's base inside HTTP Response\", ()=>expect(res.body.pizzas.every(p=>p.base===getQueryParams(req.getUrl()).base)).to.equal(true))",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Read Pizza by id",
          "seq": 3,
          "request": {
            "url": "http://localhost:3000/pizzas/1",
            "method": "GET",
            "headers": [],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.body",
                "value": "isJson",
                "enabled": true,
                "uid": "zNVroFEDX0w4Cfs6oWby0"
              },
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "lInUw5Jep0SIuvYBiEvU6"
              }
            ],
            "tests": "\ntest(\"pizza id in URL should be equal to pizza id in HTTP Response body\", ()=> \n  expect(res.getBody().pizza.id).to.equal(Number(req.url.split(\"/\").at(-1)))\n);\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Read Pizzas Collection",
          "seq": 2,
          "request": {
            "url": "http://localhost:3000/pizzas",
            "method": "GET",
            "headers": [],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.body",
                "value": "isJson",
                "enabled": true,
                "uid": "wfEFe7zChKd9GejVrh0Hs"
              },
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "erCep4PwEbl0Fio2nl20M"
              },
              {
                "name": "res.body.pizzas",
                "value": "isArray",
                "enabled": true,
                "uid": "KaTPzRkQUjADpZPNw7FSP"
              }
            ],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Search Pizza by name",
          "seq": 5,
          "request": {
            "url": "http://localhost:3000/pizzas?name=Mar",
            "method": "GET",
            "headers": [],
            "params": [
              {
                "name": "name",
                "value": "Mar",
                "type": "query",
                "enabled": true
              }
            ],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.body",
                "value": "isJson",
                "enabled": true,
                "uid": "vaLeva2UCbkr3ISzkoR8Y"
              },
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "DXAFBForDB5uoy31ar8rA"
              },
              {
                "name": "res.body.pizzas",
                "value": "isArray",
                "enabled": true,
                "uid": "88i6mSFAyBHzY8pqYtbEC"
              }
            ],
            "tests": "function getQueryParams(url) {\n  const paramArr = url.slice(url.indexOf('?') + 1).split('&');\n  const params = {};\n  paramArr.map(param => {\n      const [key, val] = param.split('=');\n      params[key] = decodeURIComponent(val);\n  })\n  return params;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Update (PATCH) 1 Pizza by id",
          "seq": 7,
          "request": {
            "url": "http://localhost:3000/pizzas/1",
            "method": "PATCH",
            "headers": [],
            "params": [],
            "body": {
              "mode": "json",
              "json": "{\n  \"id\":1,\n  \"name\": \"Boscaiola\",\n  \"ingredients\": [\"champignons\",\"jambon cru\"],\n  \"price\": 12,\n  \"base\":\"Crème\"\n}",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "wYpXi8QJipRUZoI83m4hH"
              },
              {
                "name": "req.body",
                "value": "isNotEmpty",
                "enabled": true,
                "uid": "pNXtyDkXTghbqdsJyGIzS"
              }
            ],
            "tests": "  test(\"id inside HTTP Response body should be equal to id inside HTTP request body\", ()=>expect(res.body.pizza.id).to.equal(req.body.id))\n    \n  test(\"id inside HTTP Response body should be equal to id inside HTTP request URL\", ()=>expect(res.body.pizza.id).to.equal(Number(req.getUrl().split(\"/\").reverse()[0])))",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "Update (PUT) 1 Pizza by id",
          "seq": 6,
          "request": {
            "url": "http://localhost:3000/pizzas/1",
            "method": "PUT",
            "headers": [],
            "params": [],
            "body": {
              "mode": "json",
              "json": "{\n  \"id\":1,\n  \"name\": \"Margherita\",\n  \"base\":\"Tomate\",\n  \"ingredients\": [\"basilic\",\"mozzarella di bufala\"],\n  \"price\": 10\n}",
              "formUrlEncoded": [],
              "multipartForm": []
            },
            "script": {},
            "vars": {},
            "assertions": [
              {
                "name": "req.body",
                "value": "isNotEmpty",
                "enabled": true,
                "uid": "ncxChy6LlopYBtSzYDrVs"
              },
              {
                "name": "req.body.id",
                "value": "isDefined",
                "enabled": true,
                "uid": "anCl6NATa2v2mJuC9Msod"
              },
              {
                "name": "req.body",
                "value": "isJson",
                "enabled": true,
                "uid": "7qZLPmM1YPfU1YI1KJeq7"
              },
              {
                "name": "res.status",
                "value": "eq 200",
                "enabled": true,
                "uid": "5E5qjEvmvDUS9fxgHGQgg"
              }
            ],
            "tests": "test(\"id inside response body should be equal to id inside response\", ()=>expect(res.body.pizza.id).to.equal(req.body.id))\n    \ntest(\"id inside response body should be equal to id inside request URL\", ()=>expect(res.body.pizza.id).to.equal(Number(req.getUrl().split(\"/\").reverse()[0])))\n\ntest(\"pizza.name inside response body should be equal to pizza name inside response\", ()=>expect(res.body.pizza.name).to.equal(req.body.name))\n\ntest(\"pizza.price inside response body should be equal to pizza price inside response\", ()=>expect(res.body.pizza.price).to.equal(req.body.price))\n\ntest(\"pizza.base inside response body should be equal to pizza base inside response\", ()=>expect(res.body.pizza.base).to.equal(req.body.base))\n\ntest(\"pizza.ingredients length inside response body should be equal to pizza ingredients length inside response\", ()=>expect(res.body.pizza.ingredients.length).to.equal(req.body.ingredients.length))\n\ntest(\"pizza.ingredients inside response body should be equal to pizza ingredients inside response\", ()=>expect(JSON.stringify(res.body.pizza.ingredients)).to.equal(JSON.stringify(req.body.ingredients)))",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "folder",
          "name": "errors",
          "items": [
            {
              "type": "http",
              "name": "Error Update (PUT) 1 Pizza by id (bad id)",
              "seq": 1,
              "request": {
                "url": "http://localhost:3000/pizzas/0",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"id\":0,\n  \"name\": \"\",\n  \"ingredients\": [],\n  \"price\": 10\n}",
                  "formUrlEncoded": [],
                  "multipartForm": []
                },
                "script": {},
                "vars": {},
                "assertions": [
                  {
                    "name": "res.status",
                    "value": "eq 400",
                    "enabled": true,
                    "uid": "7k7cs6W8lxhPrwjsUScW1"
                  },
                  {
                    "name": "res.body",
                    "value": "eq id param in URI should be greater than 0",
                    "enabled": true,
                    "uid": "gdpkLFQzAqPSKZaEhRGe3"
                  }
                ],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Error Update (PUT) 1 Pizza by id (differents ids)",
              "seq": 3,
              "request": {
                "url": "http://localhost:3000/pizzas/1",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"id\":2,\n  \"name\": \"\",\n  \"ingredients\": [],\n  \"price\": 10\n}",
                  "formUrlEncoded": [],
                  "multipartForm": []
                },
                "script": {},
                "vars": {},
                "assertions": [
                  {
                    "name": "res.status",
                    "value": "eq 400",
                    "enabled": true,
                    "uid": "YH90DVIZszZWolRp3aDBr"
                  },
                  {
                    "name": "res.body",
                    "value": "eq id param in URI should be equal to id attribute in body",
                    "enabled": true,
                    "uid": "tJIF68NLolYBGgMIWyKHY"
                  }
                ],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            },
            {
              "type": "http",
              "name": "Error Update (PUT) 1 Pizza by id (missing name)",
              "seq": 2,
              "request": {
                "url": "http://localhost:3000/pizzas/1",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"id\":1,\n  \"name\": \"\",\n  \"ingredients\": [],\n  \"price\": 10,\n  \"base\":\"\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": []
                },
                "script": {},
                "vars": {},
                "assertions": [
                  {
                    "name": "res.status",
                    "value": "eq 400",
                    "enabled": true,
                    "uid": "Js9emGHJl9aoN4NhM1TqW"
                  }
                ],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "none"
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "environments": [],
  "brunoConfig": {
    "version": "1",
    "name": "Pizzas Napoli REST API",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ]
  }
}